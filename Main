#include <iostream>
#include <math.h>

using namespace std;
#include "Binario.h"
int main()
{
    int tablaDeVerdad, cont = 0, n, salida, cont1 = 0,unos[10], numUnos;
    Binario obtencionUnos[128], Tabla0;
    numBinario numeracion;
    cout<<"Ingrese el numero de variables: ";
    cin>>n;
    cout << "Ingrese la tabla de verdad" << endl;
    cont ;
    salida = pow(2,n);
    do{
        //asigna el valor del contador y convierte a binario
        Tabla0.setNumeroB(numeracion.decToBinary(cont));
        Tabla0.getNumeroB().muestra(n);
        cout<< "   ";
        cin>> tablaDeVerdad;// valor ingrsado de la tabla de verdad
        if(tablaDeVerdad == 1)
        {
            obtencionUnos[cont1].setNumeroB(numeracion.decToBinary(cont));
            obtencionUnos[cont1].numeroUnos(unos, n, numUnos);
            cont1++;
        }
        cont++;
    }while(cont < salida);

    int cont0 = 0, cont2= 0, cont3= 0, cont4= 0, cont5 = 0, cont6 = 0;
    Binario Tabla1[15], Tabla2[15], Tabla3[15], Tabla4[15], Tabla5[15];

    for(int a = 0; a< cont1; a++)
    {
        cont = obtencionUnos[a].numeroUnos(unos, n, numUnos );
        if(cont == 0)
        {
            Tabla0 = obtencionUnos[0];
            cont0++;
        }

        if( cont  == 1)
           {
              Tabla1[cont6] =  obtencionUnos[a];
              cont6++;
           }
        if(cont == 2)
           {
              Tabla2[cont2] =  obtencionUnos[a];
              cont2++;
           }
        if(cont == 3)
           {
              Tabla3[cont3] =  obtencionUnos[a];
              cont3++;
           }
        if(cont == 4)
           {
              Tabla4[cont4] =  obtencionUnos[a];
              cont4++;
           }
        if(cont == 5)
           {
              Tabla5[cont5] =  obtencionUnos[a];
              cont5++;
           }
    }
Binario tablaX[64],Final[16][16], FinalTemporal;;
int conTablas = 0, finalTemp = 0, contX = 1,finalColumn = 0, finalRow = 0, posicionceros[8], cuantosCeros, cerosCont= 0, buscador = 0, posicion1 ;
numBinario  temporal[32], temporal2[32], meanwhile,  meanwhile2, temporalX[32];
if(cont0 > 0)
{
    for(int a = 0; a < cont0; a++)
    {   for(int b = 0; b< cont6; b++)
            {
                tablaX[conTablas] = Tabla0.compara(Tabla1,n, b);
                if(tablaX[conTablas].getNumeroD() == -1)
                    cont--;
                else
                {
                    Final[finalRow][finalColumn].setMarca(1);
                    conTablas++;
                }
            }
    }
}
if(cont6 > 0)
{
for(int a = 0; a < cont6; a++)
    {   for(int b = 0; b< cont2; b++)
            {
                tablaX[conTablas] = Tabla1[a].compara(Tabla2,n, b);
                if(tablaX[conTablas].getNumeroD() == -1)
                    cont--;
                else
                {
                    Final[finalRow][finalColumn].setMarca(1);
                    conTablas++;
                }

            }
    }
}
if(cont2 > 0)
{
for(int a = 0; a < cont2; a++)
    {   for(int b = 0; b< cont3; b++)
            {
                tablaX[conTablas] = Tabla2[a].compara(Tabla3,n, b);
                if(tablaX[conTablas].getNumeroD() == -1)
                    cont--;
               else
                {
                    Final[finalRow][finalColumn].setMarca(1);
                    conTablas++;
                }
            }
    }
}
if(cont3 > 0)
{
for(int a = 0; a < cont3; a++)
    {   for(int b = 0; b< cont4; b++)
            {
                tablaX[conTablas] = Tabla3[a].compara(Tabla4,n, b);
                if(tablaX[conTablas].getNumeroD() == -1)
                    cont--;
                    else
                {
                    Final[finalRow][finalColumn].setMarca(1);
                    conTablas++;
                }
            }
    }
}
if(cont4 > 0)
{
for(int a = 0; a < cont4; a++)
    {   for(int b = 0; b< cont5; b++)
            {
                tablaX[conTablas] = Tabla4[a].compara(Tabla5,n, b);
                conTablas++;
                if(tablaX[conTablas].getNumeroD() == -1)
                    cont--;
                else
                {
                    Final[finalRow][finalColumn].setMarca(1);
                    conTablas++;
                }
            }
    }
}
for(int a = 0; a < 16; a++)
{
     Final[0][a].setBinario(a,n);
}
for(int a = 1, b = 0; b < conTablas; a++, b++)
{
    Final[a][0] = tablaX[b];
}
for(int a = 1; a < conTablas; a++)
{
    for(int b = 0; b < 16; b++)
        Final[a][b].numeroB.numero[b];
}
for(int a = 0; a < 8; a++)
{
    for(int b = 0; b < 8; b++)
       {
           Final[a][b].numeroB.muestra(n);
           cout<< " ";
       }
    cout<<endl;
}
int a = 1;
for( int b = 1; b< conTablas ; b++)
{
    Final[b][0].MarcaFinal(Final, b);
}
for(int a = 0; a < 8; a++)
{
    for(int b = 0; b < 8; b++)
       {
           cout<<Final[a][b].getMarca();
           cout<< " ";
       }
    cout<<endl;
}
 cout<< 2;
}

